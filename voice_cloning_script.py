#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º TTS –º–æ–¥–µ–ª–µ–π
–ê–≤—Ç–æ—Ä: –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Ññ9
–î–∞—Ç–∞: 2024

–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
1. –ü—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –º–æ–≤–ª–µ–Ω–Ω—è –∑ –æ–¥–Ω–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è
2. –î–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: –æ–±—Ä–æ–±–∫–∞ CSV/JSON —Ñ–∞–π–ª—ñ–≤ –∑ –º–Ω–æ–∂–∏–Ω–Ω–∏–º–∏ —Ä–µ—á–µ–Ω–Ω—è–º–∏
3. –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –∑ –ø—Ä–∏–∫–ª–∞–¥—É –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É
"""

import os
import json
import pandas as pd
import numpy as np
import torch
import torchaudio
import librosa
import soundfile as sf
from pathlib import Path
from typing import List, Dict, Optional, Union
import warnings
warnings.filterwarnings("ignore")

try:
    from TTS.api import TTS
    from TTS.tts.configs.xtts_config import XttsConfig
    from TTS.tts.models.xtts import Xtts
    TTS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è TTS –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏...")
    TTS_AVAILABLE = False

try:
    import gtts
    GTTS_AVAILABLE = True
except ImportError:
    GTTS_AVAILABLE = False

try:
    import pyttsx3
    PYTTSX3_AVAILABLE = True
except ImportError:
    PYTTSX3_AVAILABLE = False

try:
    import edge_tts
    EDGE_TTS_AVAILABLE = True
except ImportError:
    EDGE_TTS_AVAILABLE = False

class VoiceCloner:
    """
    –ö–ª–∞—Å –¥–ª—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º TTS –º–æ–¥–µ–ª–µ–π
    """
    
    def __init__(self, model_name: str = "tts_models/multilingual/multi-dataset/xtts_v2"):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª–∞—Å—É VoiceCloner
        
        Args:
            model_name: –ù–∞–∑–≤–∞ TTS –º–æ–¥–µ–ª—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞–±–æ "auto" –¥–ª—è –∞–≤—Ç–æ–≤–∏–±–æ—Ä—É
        """
        self.model_name = model_name
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        print(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∏—Å—Ç—Ä—ñ–π: {self.device}")
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö TTS —Å–∏—Å—Ç–µ–º
        self.available_engines = []
        if TTS_AVAILABLE:
            self.available_engines.append("TTS")
        if GTTS_AVAILABLE:
            self.available_engines.append("GTTS")
        if PYTTSX3_AVAILABLE:
            self.available_engines.append("PYTTSX3")
        if EDGE_TTS_AVAILABLE:
            self.available_engines.append("EDGE_TTS")
        
        print(f"–î–æ—Å—Ç—É–ø–Ω—ñ TTS –¥–≤–∏–∂–∫–∏: {', '.join(self.available_engines)}")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TTS –º–æ–¥–µ–ª—ñ
        self.tts = None
        self.tts_engine = None
        self.primary_engine = None
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Coqui TTS –¥–ª—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É
        if TTS_AVAILABLE:
            try:
                self.tts = TTS(model_name=model_name).to(self.device)
                self.primary_engine = "TTS"
                
                # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö –º–æ–≤
                self.supported_languages = ['en', 'es', 'fr', 'de', 'it', 'pt', 'pl', 'tr', 'ru', 'nl', 'cs', 'ar', 'zh-cn', 'hu', 'ko', 'ja', 'hi']
                self.is_multi_lingual = True
                
                print(f"‚úÖ Coqui TTS –º–æ–¥–µ–ª—å '{model_name}' –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –¥–ª—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É")
                print(f"–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏: {', '.join(self.supported_languages[:5])}... (–≤—Å—å–æ–≥–æ {len(self.supported_languages)})")
                
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Coqui TTS: {e}")
                print("–î–ª—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ Coqui TTS –º–æ–¥–µ–ª—å!")
                raise RuntimeError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ TTS –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è")
        else:
            print("‚ùå Coqui TTS –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
            print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install TTS")
            raise RuntimeError("–î–ª—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ Coqui TTS –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞")
    
    def simple_text_to_speech(self, text: str, output_path: str = "output_simple.wav") -> bool:
        """
        –ü—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –º–æ–≤–ª–µ–Ω–Ω—è –∑ –æ–¥–Ω–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–µ–Ω–Ω—è
            output_path: –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É
            
        Returns:
            bool: True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, False —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞
        """
        try:
            print(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ç–µ–∫—Å—Ç—É: '{text[:50]}...'")
            print(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–≤–∏–∂–æ–∫: {self.primary_engine}")
            
            if self.primary_engine == "TTS" and self.tts:
                # –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ TTS –º–æ–¥–µ–ª—å
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
                detected_lang = 'uk' if any(c in '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for c in text.lower()) else 'en'
                
                # –°–ø–∏—Å–æ–∫ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö –º–æ–≤ TTS
                supported_langs = ['en', 'es', 'fr', 'de', 'it', 'pt', 'pl', 'tr', 'ru', 'nl', 'cs', 'ar', 'zh-cn', 'hu', 'ko', 'ja', 'hi']
                
                # –Ø–∫—â–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫—É —è–∫ –±–ª–∏–∑—å–∫—É
                if detected_lang == 'uk':
                    lang = 'ru' if 'ru' in supported_langs else 'en'
                    print(f"–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è: {lang}")
                else:
                    lang = detected_lang if detected_lang in supported_langs else 'en'
                
                print(f"TTS –º–æ–≤–∞: {lang}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω speaker_wav
                try:
                    self.tts.tts_to_file(text=text, file_path=output_path, language=lang)
                except Exception as e:
                    if "speaker_wav" in str(e):
                        print("‚ö†Ô∏è TTS –º–æ–¥–µ–ª—å –ø–æ—Ç—Ä–µ–±—É—î speaker_wav, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ fallback")
                        raise e
                    else:
                        raise e
                
            elif self.primary_engine == "GTTS":
                # Google Text-to-Speech
                from gtts import gTTS
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏
                lang = 'uk' if any(c in '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for c in text.lower()) else 'en'
                
                print(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–æ–≤–∞: {lang}")
                tts = gTTS(text=text, lang=lang, slow=False)
                tts.save(output_path)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É
                import os
                if os.path.exists(output_path):
                    file_size = os.path.getsize(output_path)
                    print(f"–†–æ–∑–º—ñ—Ä –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É: {file_size} –±–∞–π—Ç")
                    if file_size < 1000:  # –ú–µ–Ω—à–µ 1KB –º–æ–∂–µ –æ–∑–Ω–∞—á–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É
                        print("‚ö†Ô∏è –ê—É–¥—ñ–æ—Ñ–∞–π–ª –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
                
            elif self.primary_engine == "PYTTSX3" and self.tts_engine:
                # –°–∏—Å—Ç–µ–º–Ω–∏–π TTS (Windows SAPI/macOS/Linux espeak)
                self.tts_engine.save_to_file(text, output_path)
                self.tts_engine.runAndWait()
                
            else:
                print("‚ùå –ñ–æ–¥–Ω–∞ TTS —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return False
            
            print(f"‚úÖ –ê—É–¥—ñ–æ—Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º–æ–≤–ª–µ–Ω–Ω—è: {e}")
            # –°–ø—Ä–æ–±–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
            return self._fallback_tts(text, output_path)
    
    def _fallback_tts(self, text: str, output_path: str) -> bool:
        """–†–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥ TTS"""
        try:
            print("üîÑ –°–ø—Ä–æ–±–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ TTS...")
            
            if GTTS_AVAILABLE and self.primary_engine != "GTTS":
                from gtts import gTTS
                import os
                lang = 'uk' if any(c in '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for c in text.lower()) else 'en'
                print(f"–†–µ–∑–µ—Ä–≤–Ω–∏–π GTTS, –º–æ–≤–∞: {lang}")
                tts = gTTS(text=text, lang=lang, slow=False)
                tts.save(output_path)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                if os.path.exists(output_path):
                    file_size = os.path.getsize(output_path)
                    print(f"–†–æ–∑–º—ñ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É: {file_size} –±–∞–π—Ç")
                    if file_size > 1000:
                        print(f"‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ GTTS —è–∫ —Ä–µ–∑–µ—Ä–≤: {output_path}")
                        return True
                    else:
                        print("‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–Ω–∏–π —Ñ–∞–π–ª —Ç–∞–∫–æ–∂ –ø–æ—Ä–æ–∂–Ω—ñ–π")
                        return False
                
            elif PYTTSX3_AVAILABLE and self.primary_engine != "PYTTSX3":
                engine = pyttsx3.init()
                engine.save_to_file(text, output_path)
                engine.runAndWait()
                print(f"‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ PYTTSX3 —è–∫ —Ä–µ–∑–µ—Ä–≤: {output_path}")
                return True
                
        except Exception as e:
            print(f"‚ùå –†–µ–∑–µ—Ä–≤–Ω–∏–π TTS —Ç–∞–∫–æ–∂ –Ω–µ –ø—Ä–∞—Ü—é—î: {e}")
            
        return False
    
    def _pick_language(self, desired_lang: str) -> str:
        """–í–∏–±—ñ—Ä –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–æ—ó –º–æ–≤–∏ –¥–ª—è XTTS v2"""
        if desired_lang in self.supported_languages:
            return desired_lang
        
        # –Ø–∫—â–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫—É —è–∫ –Ω–∞–π–±–ª–∏–∂—á—É
        if desired_lang == "uk":
            return "ru" if "ru" in self.supported_languages else "en"
        
        return "en"  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞
    
    def clone_voice_from_sample(self, text: str, speaker_wav_path: str, 
                               output_path: str = "output_cloned.wav", language: str = "en", speed: float = 1.0) -> bool:
        """
        –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –∑ –ø—Ä–∏–∫–ª–∞–¥—É –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–µ–Ω–Ω—è
            speaker_wav_path: –®–ª—è—Ö –¥–æ –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º –≥–æ–ª–æ—Å—É (6-15 —Å–µ–∫—É–Ω–¥, WAV)
            output_path: –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            language: –ú–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó (en, ru, fr, de, etc.)
            speed: –®–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–ª–µ–Ω–Ω—è (0.5-2.0)
            
        Returns:
            bool: True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, False —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞
        """
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ Coqui TTS
            if self.primary_engine != "TTS" or self.tts is None:
                print("‚ùå –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–µ –ª–∏—à–µ –∑ Coqui TTS/XTTS –º–æ–¥–µ–ª—å.")
                print("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–π—Ç–µ VoiceCloner –∑ model_name='tts_models/multilingual/multi-dataset/xtts_v2'")
                return False
            
            if not os.path.exists(speaker_wav_path):
                print(f"‚ùå –§–∞–π–ª –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º –≥–æ–ª–æ—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {speaker_wav_path}")
                print("–ü–æ—Ç—Ä—ñ–±–µ–Ω WAV —Ñ–∞–π–ª 6-15 —Å–µ–∫—É–Ω–¥ —á–∏—Å—Ç–æ–≥–æ –º–æ–≤–ª–µ–Ω–Ω—è")
                return False
            
            # –í–∏–±—ñ—Ä –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–æ—ó –º–æ–≤–∏
            selected_lang = self._pick_language(language)
            if selected_lang != language:
                print(f"‚ö†Ô∏è –ú–æ–≤–∞ '{language}' –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è '{selected_lang}'")
            
            print(f"üé≠ –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É:")
            print(f"   –ó—Ä–∞–∑–æ–∫: {speaker_wav_path}")
            print(f"   –¢–µ–∫—Å—Ç: '{text[:50]}...'")
            print(f"   –ú–æ–≤–∞: {selected_lang}")
            print(f"   –®–≤–∏–¥–∫—ñ—Å—Ç—å: {speed}x")
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            speed = max(0.5, min(2.0, speed))
            
            # –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            self.tts.tts_to_file(
                text=text,
                speaker_wav=speaker_wav_path,
                language=selected_lang,
                speed=speed,
                file_path=output_path
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            if os.path.exists(output_path):
                file_size = os.path.getsize(output_path)
                print(f"‚úÖ –ö–ª–æ–Ω–æ–≤–∞–Ω–∏–π –≥–æ–ª–æ—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_path} ({file_size} –±–∞–π—Ç)")
                return True
            else:
                print("‚ùå –§–∞–π–ª –Ω–µ –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                return False
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É: {e}")
            if "speaker_wav" in str(e):
                print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Ñ–∞–π–ª –∑—Ä–∞–∑–∫–∞ - —Ü–µ WAV –∑ —á–∏—Å—Ç–∏–º –º–æ–≤–ª–µ–Ω–Ω—è–º 6-15 —Å–µ–∫—É–Ω–¥")
            return False
    
    def process_csv_file(self, csv_path: str, text_column: str = "text", 
                        speaker_wav_path: Optional[str] = None, 
                        output_dir: str = "output_audio", language: str = "uk") -> Dict[str, List[str]]:
        """
        –î–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: –æ–±—Ä–æ–±–∫–∞ CSV —Ñ–∞–π–ª—É –∑ –º–Ω–æ–∂–∏–Ω–Ω–∏–º–∏ —Ä–µ—á–µ–Ω–Ω—è–º–∏
        
        Args:
            csv_path: –®–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É
            text_column: –ù–∞–∑–≤–∞ –∫–æ–ª–æ–Ω–∫–∏ –∑ —Ç–µ–∫—Å—Ç–æ–º
            speaker_wav_path: –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º –≥–æ–ª–æ—Å—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—ñ–≤
            language: –ú–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
            
        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {"success": [...], "failed": [...]}
        """
        try:
            # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è CSV —Ñ–∞–π–ª—É
            df = pd.read_csv(csv_path)
            print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ CSV —Ñ–∞–π–ª –∑ {len(df)} –∑–∞–ø–∏—Å–∞–º–∏")
            
            if text_column not in df.columns:
                print(f"–ö–æ–ª–æ–Ω–∫–∞ '{text_column}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ CSV —Ñ–∞–π–ª—ñ")
                return {"success": [], "failed": []}
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –≤–∏–≤–æ–¥—É
            Path(output_dir).mkdir(exist_ok=True)
            
            results = {"success": [], "failed": []}
            
            for idx, row in df.iterrows():
                text = str(row[text_column])
                if pd.isna(text) or text.strip() == "":
                    continue
                
                output_filename = f"audio_{idx:04d}.wav"
                output_path = os.path.join(output_dir, output_filename)
                
                print(f"–û–±—Ä–æ–±–∫–∞ {idx+1}/{len(df)}: {text[:30]}...")
                
                # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞—É–¥—ñ–æ
                if speaker_wav_path and os.path.exists(speaker_wav_path):
                    success = self.clone_voice_from_sample(text, speaker_wav_path, output_path, language)
                else:
                    success = self.simple_text_to_speech(text, output_path)
                
                if success:
                    results["success"].append(output_path)
                else:
                    results["failed"].append(f"Row {idx}: {text[:30]}")
            
            print(f"\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø—ñ—à–Ω–æ: {len(results['success'])}, –ü–æ–º–∏–ª–æ–∫: {len(results['failed'])}")
            return results
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ CSV —Ñ–∞–π–ª—É: {e}")
            return {"success": [], "failed": []}
    
    def process_json_file(self, json_path: str, text_field: str = "text", 
                         speaker_wav_path: Optional[str] = None, 
                         output_dir: str = "output_audio", language: str = "uk") -> Dict[str, List[str]]:
        """
        –î–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: –æ–±—Ä–æ–±–∫–∞ JSON —Ñ–∞–π–ª—É –∑ –º–Ω–æ–∂–∏–Ω–Ω–∏–º–∏ —Ä–µ—á–µ–Ω–Ω—è–º–∏
        
        Args:
            json_path: –®–ª—è—Ö –¥–æ JSON —Ñ–∞–π–ª—É
            text_field: –ù–∞–∑–≤–∞ –ø–æ–ª—è –∑ —Ç–µ–∫—Å—Ç–æ–º
            speaker_wav_path: –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º –≥–æ–ª–æ—Å—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—ñ–≤
            language: –ú–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
            
        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {"success": [...], "failed": [...]}
        """
        try:
            # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è JSON —Ñ–∞–π–ª—É
            with open(json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            if isinstance(data, dict):
                data = [data]
            
            print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ JSON —Ñ–∞–π–ª –∑ {len(data)} –∑–∞–ø–∏—Å–∞–º–∏")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –≤–∏–≤–æ–¥—É
            Path(output_dir).mkdir(exist_ok=True)
            
            results = {"success": [], "failed": []}
            
            for idx, item in enumerate(data):
                if text_field not in item:
                    continue
                
                text = str(item[text_field])
                if not text.strip():
                    continue
                
                output_filename = f"audio_{idx:04d}.wav"
                output_path = os.path.join(output_dir, output_filename)
                
                print(f"–û–±—Ä–æ–±–∫–∞ {idx+1}/{len(data)}: {text[:30]}...")
                
                # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞—É–¥—ñ–æ
                if speaker_wav_path and os.path.exists(speaker_wav_path):
                    success = self.clone_voice_from_sample(text, speaker_wav_path, output_path, language)
                else:
                    success = self.simple_text_to_speech(text, output_path)
                
                if success:
                    results["success"].append(output_path)
                else:
                    results["failed"].append(f"Item {idx}: {text[:30]}")
            
            print(f"\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø—ñ—à–Ω–æ: {len(results['success'])}, –ü–æ–º–∏–ª–æ–∫: {len(results['failed'])}")
            return results
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ JSON —Ñ–∞–π–ª—É: {e}")
            return {"success": [], "failed": []}

def create_sample_data():
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ CSV —Ç–∞ JSON —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    """
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—É CSV —Ñ–∞–π–ª—É
    sample_texts = [
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –ø–µ—Ä—à–∏–π –ø—Ä–∏–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É.",
        "–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –∑–º—ñ–Ω—é—î –Ω–∞—à —Å–≤—ñ—Ç –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è.",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è —Å—Ç–∞—é—Ç—å –≤—Å–µ –±—ñ–ª—å—à –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏.",
        "–ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –≤—ñ–¥–∫—Ä–∏–≤–∞—î –Ω–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è —Ç–≤–æ—Ä—á–æ—Å—Ç—ñ.",
        "–¶–µ–π —Ç–µ–∫—Å—Ç –±—É–¥–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ –∞—É–¥—ñ–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI.",
        "Hello! This is an example in English language.",
        "Machine learning is fascinating and powerful technology.",
        "Voice cloning opens new possibilities for content creation."
    ]
    
    # CSV —Ñ–∞–π–ª
    df = pd.DataFrame({"text": sample_texts})
    df.to_csv("sample_texts.csv", index=False, encoding='utf-8')
    print("–°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏–∫–ª–∞–¥ CSV —Ñ–∞–π–ª—É: sample_texts.csv")
    
    # JSON —Ñ–∞–π–ª
    json_data = [{"text": text, "id": idx} for idx, text in enumerate(sample_texts)]
    with open("sample_texts.json", 'w', encoding='utf-8') as f:
        json.dump(json_data, f, ensure_ascii=False, indent=2)
    print("–°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏–∫–ª–∞–¥ JSON —Ñ–∞–π–ª—É: sample_texts.json")

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∞
    """
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É ===\n")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –¥–∞–Ω–∏—Ö
    create_sample_data()
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è VoiceCloner –∑ XTTS v2 –¥–ª—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É
    print("\n–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Coqui TTS –¥–ª—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É...")
    try:
        cloner = VoiceCloner()  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º XTTS v2
    except Exception as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏: {e}")
        print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Coqui TTS: pip install TTS")
        return
    
    # 1. –ü—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
    print("\n=== 1. –ü—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: –æ–¥–Ω–µ —Ä–µ—á–µ–Ω–Ω—è ===")
    simple_text = "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –ø—Ä–∏–∫–ª–∞–¥ –ø—Ä–æ—Å—Ç–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º–æ–≤–ª–µ–Ω–Ω—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É."
    cloner.simple_text_to_speech(simple_text, "simple_example.wav")
    
    # 2. –î–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - CSV
    print("\n=== 2. –î–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: –æ–±—Ä–æ–±–∫–∞ CSV ===")
    csv_results = cloner.process_csv_file("sample_texts.csv", output_dir="csv_output")
    
    # 3. –î–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - JSON  
    print("\n=== 3. –î–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: –æ–±—Ä–æ–±–∫–∞ JSON ===")
    json_results = cloner.process_json_file("sample_texts.json", output_dir="json_output")
    
    # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É
    print("\n=== 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É ===")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑—Ä–∞–∑–∫–∞ –≥–æ–ª–æ—Å—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑—Ä–∞–∑–∫–∞ –≥–æ–ª–æ—Å—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó...")
    sample_success = cloner.simple_text_to_speech(
        "Hello, this is a voice sample for cloning demonstration. My name is Test Speaker.",
        "speaker_sample.wav"
    )
    
    if sample_success:
        print("\nüé≠ –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –∑ —Ä—ñ–∑–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        
        # –ü—Ä–∏–∫–ª–∞–¥ 1: –ë–∞–∑–æ–≤–µ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é
        clone_text_en = "This is cloned voice speaking English with the same characteristics."
        cloner.clone_voice_from_sample(
            clone_text_en,
            "speaker_sample.wav",
            "cloned_voice_en.wav",
            language="en",
            speed=1.0
        )
        
        # –ü—Ä–∏–∫–ª–∞–¥ 2: –®–≤–∏–¥—à–µ –º–æ–≤–ª–µ–Ω–Ω—è
        clone_text_fast = "This is the same voice but speaking faster than normal."
        cloner.clone_voice_from_sample(
            clone_text_fast,
            "speaker_sample.wav", 
            "cloned_voice_fast.wav",
            language="en",
            speed=1.3
        )
        
        # –ü—Ä–∏–∫–ª–∞–¥ 3: –ü–æ–≤—ñ–ª—å–Ω—ñ—à–µ –º–æ–≤–ª–µ–Ω–Ω—è
        clone_text_slow = "This is the same voice speaking slowly and clearly."
        cloner.clone_voice_from_sample(
            clone_text_slow,
            "speaker_sample.wav",
            "cloned_voice_slow.wav", 
            language="en",
            speed=0.8
        )
        
        # –ü—Ä–∏–∫–ª–∞–¥ 4: –ö—Ä–æ—Å-–º–æ–≤–Ω–∏–π (–∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–π –∑—Ä–∞–∑–æ–∫ ‚Üí —Ä–æ—Å—ñ–π—Å—å–∫–∞)
        clone_text_ru = "–≠—Ç–æ —Ç–æ—Ç –∂–µ –≥–æ–ª–æ—Å, –Ω–æ –≥–æ–≤–æ—Ä—è—â–∏–π –ø–æ-—Ä—É—Å—Å–∫–∏."
        cloner.clone_voice_from_sample(
            clone_text_ru,
            "speaker_sample.wav",
            "cloned_voice_ru.wav",
            language="ru",
            speed=1.0
        )
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑—Ä–∞–∑–æ–∫ –≥–æ–ª–æ—Å—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó.")
    
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
    print("–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏:")
    print("- simple_example.wav (–ø—Ä–æ—Å—Ç–∏–π –ø—Ä–∏–∫–ª–∞–¥)")
    print("- csv_output/ (–∞—É–¥—ñ–æ –∑ CSV)")
    print("- json_output/ (–∞—É–¥—ñ–æ –∑ JSON)")
    print("- speaker_sample.wav (–∑—Ä–∞–∑–æ–∫ –≥–æ–ª–æ—Å—É)")
    print("- cloned_voice_en.wav (–∫–ª–æ–Ω–æ–≤–∞–Ω–∏–π –≥–æ–ª–æ—Å - –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞)")
    print("- cloned_voice_fast.wav (–∫–ª–æ–Ω–æ–≤–∞–Ω–∏–π –≥–æ–ª–æ—Å - —à–≤–∏–¥–∫–æ)")
    print("- cloned_voice_slow.wav (–∫–ª–æ–Ω–æ–≤–∞–Ω–∏–π –≥–æ–ª–æ—Å - –ø–æ–≤—ñ–ª—å–Ω–æ)")
    print("- cloned_voice_ru.wav (–∫–ª–æ–Ω–æ–≤–∞–Ω–∏–π –≥–æ–ª–æ—Å - –∫—Ä–æ—Å-–º–æ–≤–Ω–∏–π)")
    
    print("\nüìä –û—Ü—ñ–Ω–∫–∞ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è:")
    print("‚úÖ –ü—Ä–æ—Å—Ç–∏–π TTS: –í–∏–∫–æ–Ω–∞–Ω–æ")
    print("‚úÖ –î–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π TTS (CSV/JSON): –í–∏–∫–æ–Ω–∞–Ω–æ")
    print("‚úÖ –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É: –í–∏–∫–æ–Ω–∞–Ω–æ –∑ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—î—é")
    print("‚úÖ –ó–º—ñ–Ω–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ: –í–∏–∫–æ–Ω–∞–Ω–æ (0.8x, 1.0x, 1.3x)")
    print("‚úÖ –ö—Ä–æ—Å-–º–æ–≤–Ω–µ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è: –í–∏–∫–æ–Ω–∞–Ω–æ (EN‚ÜíRU)")
    
    print("\n‚ö†Ô∏è –û–±–º–µ–∂–µ–Ω–Ω—è:")
    print("- XTTS v2 –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è ru/en)")
    print("- –Ø–∫—ñ—Å—Ç—å –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —è–∫–æ—Å—Ç—ñ –∑—Ä–∞–∑–∫–∞ –≥–æ–ª–æ—Å—É")
    print("- –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –∑—Ä–∞–∑–æ–∫: 6-15 —Å–µ–∫—É–Ω–¥ —á–∏—Å—Ç–æ–≥–æ –º–æ–≤–ª–µ–Ω–Ω—è")

if __name__ == "__main__":
    main()
