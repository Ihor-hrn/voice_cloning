#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∞—É–¥—ñ–æ–∑–∞–ø–∏—Å—É –∑ –ø–∞–ø–∫–∏ test
"""

import os
import sys
from pathlib import Path

# –Ü–º–ø–æ—Ä—Ç –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
from voice_cloning_script import VoiceCloner

def convert_ogg_to_wav(input_path: str, output_path: str) -> bool:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç—É—î OGG —Ñ–∞–π–ª —É WAV —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É
    
    Args:
        input_path: –®–ª—è—Ö –¥–æ OGG —Ñ–∞–π–ª—É
        output_path: –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è WAV —Ñ–∞–π–ª—É
    
    Returns:
        bool: True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, False —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞
    """
    try:
        # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ librosa –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
        import librosa
        import soundfile as sf
        
        print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è {input_path} ‚Üí {output_path}")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ –∑ librosa
        audio_data, sample_rate = librosa.load(input_path, sr=None)
        
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞—É–¥—ñ–æ: sample_rate={sample_rate}, duration={len(audio_data)/sample_rate:.2f}s")
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É WAV —Ñ–æ—Ä–º–∞—Ç—ñ
        sf.write(output_path, audio_data, sample_rate)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if os.path.exists(output_path):
            file_size = os.path.getsize(output_path)
            print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {output_path} ({file_size} –±–∞–π—Ç)")
            return True
        else:
            print("‚ùå –§–∞–π–ª –Ω–µ –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø—ñ—Å–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó")
            return False
            
    except ImportError:
        print("‚ùå librosa –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –°–ø—Ä–æ–±–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É...")
        return convert_with_pydub(input_path, output_path)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∑ librosa: {e}")
        return convert_with_pydub(input_path, output_path)

def convert_with_pydub(input_path: str, output_path: str) -> bool:
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —á–µ—Ä–µ–∑ pydub
    """
    try:
        from pydub import AudioSegment
        
        print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —á–µ—Ä–µ–∑ pydub...")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è OGG —Ñ–∞–π–ª—É
        audio = AudioSegment.from_ogg(input_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É WAV
        audio.export(output_path, format="wav")
        
        if os.path.exists(output_path):
            file_size = os.path.getsize(output_path)
            print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {output_path} ({file_size} –±–∞–π—Ç)")
            return True
        else:
            return False
            
    except ImportError:
        print("‚ùå pydub –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install pydub")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∑ pydub: {e}")
        return False

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É
    """
    print("=== –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –∑ –∞—É–¥—ñ–æ–∑–∞–ø–∏—Å—É ===\n")
    
    # –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
    input_audio = "test/audio_2025-08-17_09-55-15.ogg"
    converted_audio = "test/speaker_sample.wav"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    if not os.path.exists(input_audio):
        print(f"‚ùå –ê—É–¥—ñ–æ—Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {input_audio}")
        return
    
    print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ –∞—É–¥—ñ–æ—Ñ–∞–π–ª: {input_audio}")
    
    # 1. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è OGG ‚Üí WAV
    print("\n=== –ï—Ç–∞–ø 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∞—É–¥—ñ–æ ===")
    success = convert_ogg_to_wav(input_audio, converted_audio)
    
    if not success:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –∞—É–¥—ñ–æ—Ñ–∞–π–ª")
        print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏: pip install librosa soundfile pydub")
        return
    
    # 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è VoiceCloner
    print("\n=== –ï—Ç–∞–ø 2: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª–æ–Ω–µ—Ä–∞ –≥–æ–ª–æ—Å—É ===")
    try:
        cloner = VoiceCloner()
        print("‚úÖ VoiceCloner —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
        print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Coqui TTS: pip install TTS")
        return
    
    # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É
    print("\n=== –ï—Ç–∞–ø 3: –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É ===")
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Ç–µ–∫—Å—Ç–∏ –¥–ª—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è
    test_texts = [
        {
            "text": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
            "language": "ru",  # XTTS –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î uk, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ru
            "output": "cloned_ukrainian.wav",
            "speed": 1.0
        },
        {
            "text": "Hello! This is a voice cloning test in English.",
            "language": "en", 
            "output": "cloned_english.wav",
            "speed": 1.0
        },
        {
            "text": "This is the same voice speaking faster than normal speed.",
            "language": "en",
            "output": "cloned_fast.wav", 
            "speed": 1.3
        },
        {
            "text": "This is the same voice speaking slowly and clearly.",
            "language": "en",
            "output": "cloned_slow.wav",
            "speed": 0.7
        }
    ]
    
    successful_clones = []
    failed_clones = []
    
    for i, test in enumerate(test_texts, 1):
        print(f"\nüé≠ –¢–µ—Å—Ç {i}/4: {test['text'][:40]}...")
        print(f"   –ú–æ–≤–∞: {test['language']}, –®–≤–∏–¥–∫—ñ—Å—Ç—å: {test['speed']}x")
        
        success = cloner.clone_voice_from_sample(
            text=test["text"],
            speaker_wav_path=converted_audio,
            output_path=test["output"],
            language=test["language"],
            speed=test["speed"]
        )
        
        if success:
            successful_clones.append(test["output"])
            print(f"   ‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: {test['output']}")
        else:
            failed_clones.append(test["output"])
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {test['output']}")
    
    # 4. –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
    print("\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è ===")
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {len(successful_clones)}")
    print(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {len(failed_clones)}")
    
    if successful_clones:
        print("\n–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏:")
        for file in successful_clones:
            if os.path.exists(file):
                size = os.path.getsize(file)
                print(f"  - {file} ({size} –±–∞–π—Ç)")
    
    if failed_clones:
        print("\n–ü–æ–º–∏–ª–∫–∏:")
        for file in failed_clones:
            print(f"  - {file}")
    
    print(f"\nüìä –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑—Ä–∞–∑–æ–∫: {converted_audio}")
    print("üéß –ü–æ—Ä—ñ–≤–Ω—è–π—Ç–µ –æ—Ä–∏–≥—ñ–Ω–∞–ª –∑ –∫–ª–æ–Ω–æ–≤–∞–Ω–∏–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ —è–∫–æ—Å—Ç—ñ")
    
    # 5. –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    print("\n=== –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó ===")
    print("üîç –î–ª—è –∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è:")
    print("  - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —á–∏—Å—Ç–∏–π –∑–∞–ø–∏—Å –±–µ–∑ —à—É–º—ñ–≤")
    print("  - –û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: 6-15 —Å–µ–∫—É–Ω–¥")
    print("  - –ì–æ–ª–æ—Å –º–∞—î –±—É—Ç–∏ –≤–∏—Ä–∞–∑–Ω–∏–º —Ç–∞ —á—ñ—Ç–∫–∏–º")
    print("  - –£–Ω–∏–∫–∞–π—Ç–µ –º—É–∑–∏–∫–∏ –∞–±–æ —Ñ–æ–Ω–æ–≤–∏—Ö –∑–≤—É–∫—ñ–≤")

if __name__ == "__main__":
    main()
